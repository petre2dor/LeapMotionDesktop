// Generated by CoffeeScript 1.10.0
(function() {
  Leap = require('leapjs');;
  var FrameController, config, growl, loopController, processFrame, robot,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('../lib/leap.hand-entry.js');

  robot = require("robotjs");

  growl = require('growl');

  config = require('../config.json');

  loopController = new Leap.Controller({
    inBrowser: false,
    enableGestures: true,
    frameEventName: 'deviceFrame',
    background: true,
    loopWhileDisconnected: false
  });

  loopController.use('handEntry');

  FrameController = (function() {
    function FrameController(frame1) {
      this.frame = frame1;
      this.extendedFingers = this.getExtendedFingers();
    }

    FrameController.prototype.isInMouseMode = function() {
      return indexOf.call(this.extendedFingers, "thumb") >= 0;
    };

    FrameController.prototype.getExtendedFingers = function() {
      var extendedFingers, finger, fingerMap, hand, i, len, ref;
      extendedFingers = [];
      if (this.frame.hands.length > 0) {
        hand = this.frame.hands[0];
        fingerMap = ["thumb", "index", "middle", "ring", "pinky"];
        ref = hand.fingers;
        for (i = 0, len = ref.length; i < len; i++) {
          finger = ref[i];
          if (finger.extended === true) {
            extendedFingers.push(fingerMap[finger.type]);
          }
        }
      }
      return extendedFingers;
    };

    return FrameController;

  })();

  processFrame = function(frame) {
    var frameController;
    if (frame.valid) {
      frameController = new FrameController(frame);
      if (frameController.isInMouseMode()) {
        return console.log("mouse mode");
      } else if (frameController.isInKeySchortcutMode()) {

      } else {
        return console.log("continue to chill");
      }
    } else {
      return console.log('Invalid frame');
    }
  };

  loopController.connect();

  loopController.on('frame', processFrame);

}).call(this);
